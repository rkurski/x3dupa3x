if (typeof GAME === 'undefined') {} else {
  class kwsv3 {
      constructor() {
          this.isLogged((data) => {});
          this.settings = this.getSettings();
          this.createCSS();
          if ($("#top_bar .adv").length) $("#top_bar .adv").remove();
          this.sortClanPlanets();
          this.addToCSS(`.kom{background:url(/gfx/layout/tloPilot.png); background-size:cover; border-image:url(/gfx/layout/mapborder.png) 7 8 7 7 fill; border-style:solid; border-width:7px 8px 7px 7px; box-shadow:none;} .kom .close_kom b{background:url(/gfx/layout/tloPilot.png);} .exchange_win{max-height:500; height:auto;}`);
          this.addToCSS(`#emp_list .petopt_btns .newBtn{margin:0px 3px 3px 0px;} .newBtn.do_all_instances{color:#e5d029;}`);
          this.addToCSS(`#quick_bar{z-index:4;} .qlink.kws_active_icon{animation-name:kws_active_icon;animation-duration:1s;animation-iteration-count:infinite;}@keyframes kws_active_icon { 0% { filter: hue-rotate(168deg); } 50% { filter:hue-rotate(40deg); } 100% { filter: hue-rotate(168deg); } } .sideIcons{ width:29px; height:29px; left:-37px; background-size:contain; }`);
          this.addToCSS(`.ssj_uio{background:url("https://i.imgur.com/EcfEUcG.png");}`);
          this.addToCSS(`#quick_allTransformations { position:absolute; top:33px; z-index:1; background:rgb(0 0 0 / 59%); display:none; flex-direction: column-reverse; padding:5px 5px 0px 5px; border-radius:5px; box-shadow:0px 0px 5px 0px rgb(32 96 185);} .show_qat:hover + #quick_allTransformations, #quick_allTransformations:hover { display:flex; } #quick_allTransformations .option { display:block; margin:0px 0px 5px 0px; }`);
          this.addToCSS(`#player_list_con .glory_rank.war{animation:none !important;background-color:rgb(22 83 106);box-shadow:0px 0px 7px 0px rgb(0 253 255);} .player_clan.enemy img{animation:none !important;box-shadow:0px 0px 10px 1px rgb(0 253 255);}`);
          this.addToCSS(`.better_chat_loading{filter:sepia(1) hue-rotate(270deg);} .better_chat_loading:hover{filter:sepia(1) hue-rotate(90deg);} .chat_icon.load:hover{background:url(/gfx/layout/ikonyChat.png) -90px 0px !important;}`);
          this.addToCSS(`#upg_menu button[data-page="game_buffs"]{display:block !important;}`);
          this.addToCSS(`.qtrack{width:400px;} #drag_con.scroll .qtrack{width:383px;} #quest_track_con #drag_tracker{user-select:none;} #quest_track_con .sep2{height:14px;} #quest_track_con .sep3{height:14px;}`);
          this.addToCSS(`.option.ls.spawner{ position:absolute; top:60px; right:40px; background-size: 100% 100%; border: solid #6f6f6f 1px; }`);
          this.addToCSS(`.kws_top_bar{float:left !important;} .kws_top_bar_section{color:white;padding:3px 5px 3px 5px;border-radius:5px;margin-right:8px;user-select:none;}`);
          this.addToCSS(`.go_to_emp_con{ position:absolute; top:33px; z-index:1; background:rgb(0 0 0 / 59%); display:none; flex-direction: column-reverse; padding:5px 5px 0px 5px; border-radius:5px; box-shadow:0px 0px 5px 0px rgb(32 96 185);} .empPos:hover + .go_to_emp_con, .go_to_emp_con:hover { display:flex; } .go_to_emp_con .qlink { display:block; margin:0px 0px 5px 0px; }`);
          $("#top_bar").append(`<div class="kws_top_bar"></div>`);
          $("#bless_type_2").click();
          $(`.channel_opts .option.chat_icon.load`).addClass('better_chat_loading').removeAttr('id').removeAttr('data-option');
          $("#clan_inner_planets h3").eq(0).append(`<button id="poka_telep" style="margin-left:5px;" class="newBtn">pokaż / ukryj salę telep</button>`);
          $(`<button class="newBtn free_assist_for_all" style="margin-right:5px;">Asystuj wszystkim za darmo</button>`).insertBefore(`button[data-option="clan_assist_all"]`);
          $("#clan_inner_wars h3").eq(0).append(` <button class="newBtn activate_all_clan_buffs">Aktywuj wszystkie buffy</button>`);
          this.workers_info = [false, false];
          this.autoExpeditions = false;
          this.autoExpeditionsInterval = false;
          this.auto_abyss = false;
          this.auto_abyss_interval = false;
          this.auto_arena = false;
          setInterval(() => {
              if ('char_data' in GAME) {
                  this.updateTopBar();
              }
          }, 1000);
          this.bindClickHandlers();
          GAME.socket.on('gr', (res) => {
              this.handleSockets(res);
          });
      }
      isLogged(cb) {
          let waitForID = setInterval(() => {
              if (GAME.pid) {
                  clearInterval(waitForID);
                  cb(GAME.pid);
              }
          }, 200);
      }
      getSettings() {
          let settings = JSON.parse(localStorage.getItem("kws_settings"));
          let settings_sample = {
              hide_tracker: false
          };
          if (settings && Object.keys(settings_sample).length == Object.keys(settings).length) {
              return settings;
          } else {
              localStorage.setItem('kws_settings', JSON.stringify(settings_sample));
              return settings_sample;
          }
      }
      updateSettings() {
          localStorage.setItem('kws_settings', JSON.stringify(this.settings));
      }
      goEmpPos() {
          let imp_pos = $(".empPos").position();
          $(".go_to_emp_con").css("left", imp_pos.left - 5);
      }
      listQts() {
          let trans = this.parseSSJqts(GAME.char_data.race);
          let html = ``;
          for (let i = 0; i < trans.length && trans[i][0] !== GAME.quick_opts.ssj[0]; i++) {
              html += `<div class="option qlink ${trans[i][1]}" data-option="use_transform" data-tech="${trans[i][0]}"></div>`;
          }
          if ($(".show_qat").length) {
              let ssj_pos = $(".show_qat").position();
              $("#quick_allTransformations").css("left", ssj_pos.left - 5);
          }
          $("#quick_allTransformations").html(html);
          option_bind();
      }
      parseSSJqts(race) {
          switch (race) {
              case 0:
                  return [
                      [19, "ssj1"],
                      [25, "ssj2"],
                      [26, "ssj3"],
                      [30, "ssj4"],
                      [39, "ssj5"],
                      [72, "ssja"],
                      [81, "ssjb"],
                      [116, "ssj_uio"]
                  ];
              case 1:
                  return [
                      [46, "ssj1"],
                      [50, "ssj2"],
                      [53, "ssj3"],
                      [55, "ssj4"],
                      [39, "ssj5"],
                      [72, "ssja"],
                      [81, "ssjb"],
                      [116, "ssj_uio"]
                  ];
              case 2:
                  return [
                      [63, "ssj1"],
                      [64, "ssj2"],
                      [66, "ssjm"],
                      [39, "ssj5"],
                      [72, "ssja"],
                      [81, "ssjb"],
                      [116, "ssj_uio"]
                  ];
              case 3:
                  return [
                      [78, "ssj1"],
                      [76, "ssj2"],
                      [79, "ssj3"],
                      [39, "ssj5"],
                      [72, "ssja"],
                      [81, "ssjb"],
                      [116, "ssj_uio"]
                  ];
              case 4:
                  return [
                      [92, "ssj1"],
                      [93, "ssj2"],
                      [99, "ssj3"],
                      [100, "ssj4"],
                      [39, "ssj5"],
                      [72, "ssja"],
                      [81, "ssjb"],
                      [116, "ssj_uio"]
                  ];
              case 5:
                  return [
                      [101, "ssj1"],
                      [102, "ssj2"],
                      [103, "ssj3"],
                      [110, "ssj4"],
                      [39, "ssj5"],
                      [72, "ssja"],
                      [81, "ssjb"],
                      [116, "ssj_uio"]
                  ];
              case 6:
                  return [
                      [121, "ssj1"],
                      [122, "ssj2"],
                      [123, "ssj3"],
                      [124, "ssj4"],
                      [39, "ssj5"],
                      [72, "ssja"],
                      [81, "ssjb"],
                      [116, "ssj_uio"]
                  ];
              case 7:
                  return [
                      [127, "ssj1"],
                      [128, "ssj2"],
                      [129, "ssj3"],
                      [132, "ssj4"],
                      [39, "ssj5"],
                      [72, "ssja"],
                      [81, "ssjb"],
                      [116, "ssj_uio"]
                  ];
              default:
                  return [];
          }
      }
      manageAutoExpeditions() {
          let expedNmbr = GAME.char_data.bonus16 < GAME.getTime() ? 1 : 2;
          if (!this.autoExpeditions) {
              this.autoExpeditions = true;
              this.autoExpeditionsInterval = setInterval(() => {
                  setTimeout(() => {
                      GAME.parseTimed();
                  }, 100);
                  if ($("#train_uptime").find('.timer').length == 0 && !GAME.is_training && $("#timed_label").text().includes("Wyprawa") && GAME.char_tables.timed_actions[0] != undefined) {
                      GAME.socket.emit('ga', {
                          a: 8,
                          type: 3
                      });
                  } else if ($("#train_uptime").find('.timer').length == 0 && !GAME.is_training) {
                      GAME.socket.emit('ga', {
                          a: 8,
                          type: 2,
                          stat: 1,
                          duration: 1
                      });
                      setTimeout(() => {
                          GAME.socket.emit('ga', {
                              a: 8,
                              type: 5,
                              apud: 'vzaaa'
                          });
                      }, 1500);
                  } else if (GAME.is_training && $("#train_uptime").find('.timer').length == 1) {
                      GAME.socket.emit('ga', {
                          a: 8,
                          type: 3
                      });
                  } else if (GAME.char_tables.timed_actions[0] == undefined || GAME.char_tables.timed_actions[1] == undefined && GAME.char_data.bonus16 > GAME.getTime()) {
                      GAME.socket.emit('ga', {
                          a: 10,
                          type: 2,
                          ct: 0
                      });
                      kom_clear();
                  } else {}
              }, 4000);
              $(".qlink.manage_autoExpeditions").addClass("kws_active_icon");
          } else {
              this.autoExpeditions = false;
              clearInterval(this.autoExpeditionsInterval);
              $(".qlink.manage_autoExpeditions").removeClass("kws_active_icon");
          }
      }
      manageAutoAbyss() {
          GAME.socket.emit('ga', {
              a: 59,
              type: 0
          });
          setTimeout(() => {
              if (GAME.quick_opts.ssj && $("#ssj_bar").css("display") == "none") {
                  GAME.socket.emit('ga', {
                      a: 18,
                      type: 5,
                      tech_id: GAME.quick_opts.ssj[0]
                  });
              } else if ($('#ssj_status').text() == "--:--:--") {
                  GAME.socket.emit('ga', {
                      a: 18,
                      type: 6
                  });
              }
          }, 1000);
          if ($("#ss_cd_still").css("display") == "none") {
              setTimeout(() => {
                  GAME.socket.emit('ga', {
                      a: 59,
                      type: 1
                  });
              }, 1000);
              setTimeout(() => {
                  $('#fight_view').fadeOut();
              }, 2000);
          }
      }
      manageAutoArena() {
          if (this.auto_arena) {
              GAME.socket.emit('ga', {
                  a: 46,
                  type: 0
              });
              setTimeout(() => {
                  this.attackAutoArena();
              }, 1000);
          } else {
              this.stopAutoArena();
          }
      }
      attackAutoArena() {
          let opponents = $("#arena_players").find(`.player button[data-option="arena_attack"][data-quick="1"]:not(.initial_hide_forced)`);
          let opponent = parseInt(opponents.attr("data-index"));
          if (this.auto_arena) {
              if (opponents.length > 0 && GAME.timed == 0) {
                  GAME.socket.emit('ga', {
                      a: 46,
                      type: 1,
                      index: opponent,
                      quick: 1
                  });
                  setTimeout(() => {
                      this.attackAutoArena();
                  }, 250);
              } else {
                  setTimeout(() => {
                      this.manageAutoArena();
                  }, 5000);
              }
          } else {
              this.stopAutoArena();
          }
      }
      stopAutoArena() {
          this.auto_arena = false;
          $(".qlink.manage_auto_arena").removeClass("kws_active_icon");
      }
      freeAssist() {
          let fafa_el = $(`button[data-option="clan_assist"]:visible`);
          if (fafa_el.length > 0) {
              let fafa_tid = parseInt(fafa_el.eq(0).attr("data-tid"));
              let fafa_target = parseInt(fafa_el.eq(0).attr("data-target"));
              GAME.socket.emit('ga', {
                  a: 39,
                  type: 55,
                  tid: fafa_tid,
                  target: fafa_target
              });
              fafa_el.eq(0).hide();
              setTimeout(() => {
                  this.freeAssist();
              }, 50);
          } else {
              GAME.socket.emit('ga', {
                  a: 39,
                  type: 54
              });
              GAME.komunikat("Asystowano wszystkim!");
          }
      }
      activateAllClanBuffs() {
          let abut = $("#clan_buffs").find(`button[data-option="activate_war_buff"]`);
          let isDisabled = $("#clan_buffs").find(`button[data-option="activate_war_buff"]`).parents("tr").hasClass("disabled");
          let cpbt = $("#clan_planet_buffs").html();
          let acpbut = $("#has_clan_planet").find(`button[data-option="activate_prp_buff"]`);
          if (abut.length && !isDisabled) {
              GAME.socket.emit('ga', {
                  a: 39,
                  type: 26
              });
              setTimeout(() => {
                  this.activateAllClanBuffs();
              }, 200);
          } else if (cpbt == 0) {
              GAME.socket.emit('ga', {
                  a: 39,
                  type: 28
              });
              setTimeout(() => {
                  this.activateAllClanBuffs();
              }, 200);
          } else if (acpbut.length) {
              GAME.socket.emit('ga', {
                  a: 39,
                  type: 29
              });
              setTimeout(() => {
                  this.activateAllClanBuffs();
              }, 200);
          } else {
              GAME.komunikat("Wszystkie buffy zostały aktywowane!");
          }
      }
      findWorker(worker, cb) {
          let waitForWorker = setInterval(() => {
              let el = $(`button[data-emp="${worker.id}"]button[data-option="emp_job"]`);
              let emp_local = parseInt(el.attr("data-emp_local"));
              if (el.length) {
                  this.workers_info[emp_local] = worker;
                  clearInterval(waitForWorker);
                  cb(el);
              }
          }, 100);
      }
      doAllInstances(worker, page2 = false) {
          let worker_info = this.workers_info[worker.local];
          let instance_number = this.instanceNumber();
          let essences = parseInt($("#ekw_page_items").find("div[data-base_item_id='74']").attr("data-stack"));
          if (instance_number) {
              if (worker_info.energy > 0) {
                  GAME.socket.emit('ga', {
                      a: 44,
                      type: 8,
                      emp: worker.id,
                      inst: instance_number
                  });
                  setTimeout(() => {
                      this.doAllInstances(worker)
                  }, 250);
              } else if (essences >= worker_info.maxenergy) {
                  GAME.socket.emit('ga', {
                      a: 44,
                      type: 10,
                      emp: worker_info.id
                  });
                  setTimeout(() => {
                      this.doAllInstances(worker)
                  }, 250);
              } else if (isNaN(essences) && !page2) {
                  setTimeout(() => {
                      GAME.socket.emit('ga', {
                          a: 12,
                          page: 1,
                          page2: 1
                      });
                  }, 500);
                  setTimeout(() => {
                      this.doAllInstances(worker, true)
                  }, 1000);
              } else {
                  GAME.komunikat("Nie masz wystarczającej ilości magicznych esencji!");
              }
          } else {
              GAME.komunikat("Wszystkie instancje zostały wykonane!");
          }
      }
      instanceNumber() {
          if (GAME.char_data.icd_1 < 2) {
              return 1;
          } else if (GAME.char_data.icd_2 < 2) {
              return 2;
          } else if (GAME.char_data.icd_3 < 2) {
              return 3;
          } else if (GAME.char_data.icd_4 < 2) {
              return 4;
          } else if (GAME.char_data.icd_5 < 2) {
              return 5;
          } else if (GAME.char_data.icd_6 < 2) {
              return 6;
          } else {
              return false;
          }
      }
      findMagicEssence() {
          GAME.socket.emit('ga', {
              a: 12,
              page: 1,
              page2: 0,
              used: 1
          });
          let essence = parseInt($("#ekw_page_items").find("div[data-base_item_id='74']").attr("data-stack"));
          setTimeout(() => {
              if (isNaN(essence)) {
                  GAME.socket.emit('ga', {
                      a: 12,
                      page: 1,
                      page2: 1
                  });
              }
          }, 1500);
      }
      sortClanPlanets() {
          let x = 72;
          let y = -11;
          let pl_sup = 1;
          let pl_sup_css = `#clan_planets.galactic{height:650px !important; width:658px !important;} #clan_planets_simple .tablen1{min-width:295px;}`;
          for (let i = 1; i <= 20; i++) {
              pl_sup_css += `.planet_pos.pos_${i}{left:${x}px !important; top:${y}px !important;}`;
              x += 220;
              y -= 50;
              if (pl_sup >= 3) {
                  x = 72;
                  y += 90;
                  pl_sup = 0;
              }
              pl_sup++;
          }
          this.addToCSS(pl_sup_css);
      }
      getTitlesList(cb) {
          GAME.socket.emit('ga', {
              a: 42,
              type: 9
          });
          JQS.ldr.finish().fadeIn();
          let wait_for_titles = setInterval(() => {
              let html = $("#char_titles").html();
              if (html.length) {
                  clearInterval(wait_for_titles);
                  cb(html);
              }
          }, 100);
      }
      updateTopBar() {
          let sk_status;
          let instances = [];
          let currentLevel = GAME.char_data.level;
          let currentTime = Date.now();
          let levelsGained = currentLevel - startLevel;
          let levelsPerHour = levelsGained / ((currentTime - startTime) / 1000 / 60 / 60);
          let lvlh = levelsPerHour.toFixed(2);
          if ($(`#mdbp_${GAME.char_data.reborn}`).find('.timer').length) {
              sk_status = $(`#mdbp_${GAME.char_data.reborn}`).find('.timer').text();
          } else {
              sk_status = "AKTYWNE";
          }
          let train_upgr = $("#train_uptime").find('.timer').text();
          if (train_upgr.length == 0) {
              train_upgr = "AKTYWNE";
          }
          if ('char_data' in GAME) {
              instances = [GAME.char_data.icd_1, GAME.char_data.icd_2, GAME.char_data.icd_3, GAME.char_data.icd_4, GAME.char_data.icd_5, GAME.char_data.icd_6];
          }
          let sum_instances = instances.reduce(function(a, b) {
              return a + b;
          }, 0);
          let activity = $('#char_activity').text();
          let received = $("#act_prizes").find("div.act_prize.disabled").length;
          let is_trader = new Date();
          let trader = `<span class='kws_top_bar_section trader_info' style='cursor:pointer;'>DZISIAJ HANDLARZ</span> `;
          let innerHTML = ` <span class='kws_top_bar_section sk_info' style='cursor:pointer;'>SK: <span>${sk_status}</span></span> <span class='kws_top_bar_section train_upgr_info' style='cursor:pointer;'>KODY: <span>${train_upgr}</span></span> <span class='kws_top_bar_section instances' style='cursor:pointer;'>Instancje: <span>${sum_instances}/12</span></span> <span class='kws_top_bar_section activities' style='cursor:pointer;'>Aktywności: <span>${activity}/185 (${received}/5)</span></span><span class='kws_top_bar_section lvl' style='cursor:pointer;'>LVL: <span>${lvlh}/H</span></span><span class='kws_top_bar_section pvp' style='cursor:pointer;'>PVP: <span>${pvp_count}</span></span><span class='kws_top_bar_section arena' style='cursor:pointer;'>ARENA: <span>${arena_count}</span></span> ${is_trader.getDay() == 6 ? trader : ''}<span class='kws_top_bar_section version' style='cursor:pointer;'>Wersja: <span>${version}</span></span> `;
          $(".kws_top_bar").html(innerHTML);
      }
      collectActivities() {
          let received = $("#act_prizes").find("div.act_prize.disabled").length;
          let activity = parseInt($('#char_activity').text());
          let p = [25, 50, 75, 100, 150];
          for (let i = 0; i <= 5; i++) {
              if (received < 5 && activity >= p[i]) {
                  let actPrize = $(`#act_prizes button[data-ind=${i}]`).closest(".act_prize");
                  if (!actPrize.hasClass("disabled")) {
                      GAME.socket.emit('ga', {
                          a: 49,
                          type: 1,
                          ind: i
                      });
                  }
              }
          }
      }
      markDaily() {
          let daily = ["ZADANIE PVM", "Zadanie PvP", "ROZWÓJ PLANETY ", "ZADANIE IMPERIUM", "ZADANIE KLANOWE", "NAJLEPSZY KUCHA...", "REPUTACJA", "SYMBOL WYMIARÓW", "WYMIANA CHI", "ERMITA", "Nuda", "DOSTAWCA", "BOSKA MOC", "ROZGRZEWKA", "BOSKI ULEPSZACZ", "CZAS PODRÓŻNIKÓ...", "STRAŻNIK PORZĄD...", "CODZIENNY INSTY...", "HIPER SCALACZ", "DZIWNY MEDYK"];
          daily = daily.map(item => item.trim().toLowerCase());
          $('#quest_track_con .qtrack b').each(function() {
              let zawartoscB = $(this).text().trim().toLowerCase();
              if (daily.includes(zawartoscB)) {
                  $(this).css("color", "#63aaff");
              }
          });
      }
      wojny2() {
          if (!adimp) {
              setTimeout(() => {
                  GAME.socket.emit('ga', {
                      a: 50,
                      type: 0,
                      empire: GAME.char_data.empire
                  });
              }, 100);
              adimp = true;
              window.setTimeout(this.wojny2, 200);
          } else if (!GAME.emp_enemies.includes(1) && ![GAME.char_data.empire].includes(1) && (kws.check_imp().includes(GAME.char_id) || kws.check_imp2().includes(GAME.char_id))) {
              GAME.socket.emit('ga', {
                  a: 50,
                  type: 7,
                  target: 1
              });
              window.setTimeout(this.wojny2, 200);
          } else if (!GAME.emp_enemies.includes(2) && ![GAME.char_data.empire].includes(2) && (kws.check_imp().includes(GAME.char_id) || kws.check_imp2().includes(GAME.char_id))) {
              GAME.socket.emit('ga', {
                  a: 50,
                  type: 7,
                  target: 2
              });
              window.setTimeout(this.wojny2, 200);
          } else if (!GAME.emp_enemies.includes(3) && ![GAME.char_data.empire].includes(3) && (kws.check_imp().includes(GAME.char_id) || kws.check_imp2().includes(GAME.char_id))) {
              GAME.socket.emit('ga', {
                  a: 50,
                  type: 7,
                  target: 3
              });
              window.setTimeout(this.wojny2, 200);
          } else if (!GAME.emp_enemies.includes(4) && ![GAME.char_data.empire].includes(4) && (kws.check_imp().includes(GAME.char_id) || kws.check_imp2().includes(GAME.char_id))) {
              GAME.socket.emit('ga', {
                  a: 50,
                  type: 7,
                  target: 4
              });
              window.setTimeout(this.wojny2, 200);
          } else {}
      }
      check_imp() {
          var tab = [];
          for (var i = 0; i < 3; i++) {
              tab[i] = parseInt($("#empire_heroes .activity").eq(i).find("[data-option=show_player]").attr("data-char_id"));
          }
          return tab;
      }
      check_imp2() {
          var tab = [];
          for (var i = 0; i < 3; i++) {
              tab[i] = parseInt($("#empire_efrags .activity").eq(i).find("[data-option=show_player]").attr("data-char_id"));
          }
          return tab;
      }
      vip() {
          var month = $("#monthly_vip_rewards").find(".vip_cat.option" + ":not(.disabled)" + ":not(.received)");
          var general = $("#general_vip_rewards").find(".vip_cat.option" + ":not(.disabled)" + ":not(.received)");
          if (month.length) {
              var id = parseInt(month.attr("data-vip"));
              var lvl = parseInt(month.attr("data-level"));
              GAME.socket.emit('ga', {
                  a: 54,
                  type: 1,
                  vip: id,
                  level: lvl
              });
              setTimeout(() => {
                  this.vip();
              }, 500);
          } else if (general.length) {
              var id = parseInt(general.attr("data-vip"));
              var lvl = parseInt(general.attr("data-level"));
              GAME.socket.emit('ga', {
                  a: 54,
                  type: 1,
                  vip: id,
                  level: lvl
              });
              setTimeout(() => {
                  this.vip();
              }, 500);
          } else {
              GAME.komunikat("Odebrano wszystkie możliwe nagrody z Vipa!!!");
          }
      }
      bless() {
          GAME.socket.emit('ga', {
              a: 14,
              type: 3
          });
          setTimeout(() => {
              var arr = $.map($('.use_buff:checked'), function(e, i) {
                  return +e.value;
              });
              var btype = $('input[name="bless_type"]:checked').val();
              GAME.socket.emit('ga', {
                  a: 14,
                  type: 5,
                  buffs: arr,
                  players: $('#bless_players').val(),
                  btype: btype
              });
          }, 500);
      }
      questProceed() {
          if (JQS.qcc.is(":visible")) {
              if ($("button[data-option=finish_quest]").length === 1) {
                  let qb_id = $("button[data-option=finish_quest]").attr("data-qb_id");
                  GAME.socket.emit('ga', {
                      a: 22,
                      type: 2,
                      button: 1,
                      id: qb_id
                  });
              } else if ($("button[data-option=quest_duel]").is(":visible")) {
                  let fb_id = $("button[data-option=quest_duel]").attr("data-qid");
                  GAME.socket.emit('ga', {
                      a: 22,
                      type: 6,
                      id: fb_id
                  });
              } else if ($(".quest_win .sekcja").text().toLowerCase() === "nuda" && $("button[data-option=finish_quest]").length === 3) {
                  let qb_id = $("button[data-option=finish_quest]").attr("data-qb_id");
                  GAME.socket.emit('ga', {
                      a: 22,
                      type: 2,
                      button: 2,
                      id: qb_id
                  });
              } else if ($(".quest_win .sekcja").text().toLowerCase() === "zadanie substancji" && $("button[data-option=finish_quest]").length === 3) {
                  let qb_id = $("button[data-option=finish_quest]").attr("data-qb_id");
                  GAME.socket.emit('ga', {
                      a: 22,
                      type: 2,
                      button: 3,
                      id: qb_id
                  });
              }
              setTimeout(() => {
                  $('#fight_view').fadeOut();
              }, 500);
              kom_clear();
          }
      }
      pvpKill() {
          if (!JQS.chm.is(":focus")) {
              let opponents = $("button[data-quick=1]:not(.initial_hide_forced)");
              if ($("button[data-option='load_more_players']").is(":visible")) {
                  $("button[data-option='load_more_players']").click();
                  setTimeout(() => {
                      this.pvpKill();
                  }, 110);
              } else if (opponents.length > 0) {
                  opponents.eq(0).click();
                  setTimeout(() => {
                      this.pvpKill();
                  }, 110);
              }
          }
      }
      useCompressor() {
          if (JQS.qcc.is(":visible")) {
              let compressors_button = $("#quest_con button[data-option=compress_items]");
              let quest_id = compressors_button.attr("data-qb_id");
              if (compressors_button.length === 1 && GAME.compress_items[0].stack > 0) {
                  GAME.socket.emit('ga', {
                      a: 22,
                      type: 10,
                      item_id: GAME.compress_items[0].id,
                      qb_id: quest_id
                  });
              }
          }
      }
      arena_count() {
          arena_count++;
          $(".kws_top_bar_section.arena").html(`ARENA: ${arena_count}`);
      }
      pvp_count() {
          pvp_count++;
          $(".kws_top_bar_section.pvp").html(`PVP: ${pvp_count}`);
      }
      handleSockets(res) {
          if (!this.stopped) {
              if (res.a === 7 && "result" in res && res.result && "reward" in res.result && res.result.reward && "arena_exp" in res.result.reward && res.result.reward.arena_exp && res.result.result === 1) {
                  this.arena_count();
              } else if (res.a === 7 && "result" in res && res.result && "reward" in res.result && res.result.reward && "empire_war" in res.result.reward && res.result.reward.empire_war && res.result.result === 1) {
                  this.pvp_count();
              }
          }
      }
      createCSS() {
          $("head").append(`<style id="kwsCSS"></style>`);
      }
      addToCSS(data) {
          $(`#kwsCSS`).append(data);
      }
      bindClickHandlers() {
          $("body").on("click", ".free_assist_for_all", () => {
              this.freeAssist();
          });
          $("body").on("click", ".activate_all_clan_buffs", () => {
              this.activateAllClanBuffs();
          });
          $("body").on("click", ".do_all_instances", (event) => {
              let worker = {};
              worker.id = parseInt($(event.target).attr("data-emp"));
              worker.local = parseInt($(event.target).attr("data-emp_local"));
              this.doAllInstances(worker);
          });
          $("#poka_telep").click(() => {
              GAME.socket.emit('ga', {
                  a: 39,
                  type: 35
              });
              GAME.socket.emit('ga', {
                  a: 39,
                  type: 33
              });
              if ($("#clan_inner_stelep").css("display") == "none") {
                  $("#clan_inner_stelep").css("cssText", `display:block;position:absolute;padding:10px;border:solid #003e60 2px;background:rgb(5 21 36 / 97%);z-index:9999;border-radius:5px;margin-top:85px;`);
              } else {
                  $("#clan_inner_stelep").attr("style", "display:none;");
              }
          });
          $("body").on("click", `button[data-page="stelep"].cps`, () => {
              $("#clan_inner_stelep").attr("style", "");
          }).on("click", `button[data-option="clan_tp_go"]`, () => {
              if ($("#clan_inner_stelep").css("padding") == "10px") {
                  GAME.socket.emit('ga', {
                      a: 39,
                      type: 33
                  });
              }
          }).on("click", `button[data-option="invade_planet"]`, () => {
              if ($("#clan_inner_stelep").css("padding") == "10px") {
                  GAME.socket.emit('ga', {
                      a: 39,
                      type: 33
                  });
              }
          });
          $("body").on("click", `.better_chat_loading`, () => {
              if (GAME.chat_data[GAME.chat_channel].messages.length == 0) {
                  GAME.socket.emit('ga', {
                      a: 600,
                      channel: GAME.chat_channel,
                      lm: GAME.chat_data[GAME.chat_channel].last_message
                  });
              } else {
                  GAME.socket.emit('ga', {
                      a: 600,
                      channel: GAME.chat_channel,
                      lm: GAME.chat_data[GAME.chat_channel].messages[0].time
                  });
              }
          });
          $("body").on("click", `div[tp_data=go_teleport]`, (th) => {
              const selectedText = window.getSelection().toString().trim();
              if (!selectedText) {
                  let loc = parseInt($(th.target).closest(".qtrack").attr("data-loc"));
                  GAME.socket.emit('ga', {
                      a: 12,
                      type: 18,
                      loc: loc
                  });
              }
          });
          $("body").on("click", `.kws_top_bar_section.sk_info`, () => {
              GAME.page_switch('game_balls');
          });
          $("body").on("click", `.kws_top_bar_section.trader_info`, () => {
              GAME.page_switch('game_events');
          });
          $("body").on("click", `.kws_top_bar_section.train_upgr_info`, () => {
              GAME.page_switch('game_train');
          });
          $('#drag_tracker').off('click').on('click', () => {
              if (!this.settings.hide_tracker) {
                  $('#drag_con').hide();
                  this.settings.hide_tracker = true;
              } else {
                  $('#drag_con').show();
                  this.settings.hide_tracker = false;
              }
              this.updateSettings();
          });
          $("body").on("click", ".qlink.get_titles_list", () => {
              this.getTitlesList((html) => {
                  JQS.ldr.finish().fadeOut();
                  GAME.komunikat2(`<table id="char_titles" class="fast_titles_table" style="margin:0 auto;">${html}</table>`);
                  option_bind();
                  tooltip_bind();
              });
          });
          $("body").on("click", ".fast_titles_table .option", () => {
              setTimeout(() => {
                  GAME.maploaded = false;
                  GAME.prepareMap();
              }, 300);
          });
          $("body").on("click", `.qlink.manage_auto_abyss`, () => {
              if (!this.auto_abyss) {
                  this.auto_abyss = true;
                  $(".qlink.manage_auto_abyss").addClass("kws_active_icon");
                  this.auto_abyss_interval = setInterval(() => {
                      this.manageAutoAbyss();
                  }, 5000);
              } else {
                  this.auto_abyss = false;
                  $(".qlink.manage_auto_abyss").removeClass("kws_active_icon");
                  clearInterval(this.auto_abyss_interval);
              }
          });
          $("body").on("click", `.qlink.manage_auto_arena`, () => {
              if (!this.auto_arena && GAME.timed == 0) {
                  this.auto_arena = true;
                  $(".qlink.manage_auto_arena").addClass("kws_active_icon");
                  this.manageAutoArena();
              } else {
                  this.stopAutoArena();
              }
          });
          $("body").on("click", `.qlink.manage_autoExpeditions`, () => {
              this.manageAutoExpeditions();
          });
          $("body").on("click", `.kws_top_bar_section.activities`, (event) => {
              GAME.socket.emit('ga', {
                  a: 49,
                  type: 0
              });
              setTimeout(() => {
                  this.collectActivities();
              }, 1000);
          });
          $("body").on("click", `.kws_top_bar_section.instances`, () => {
              GAME.page_switch('game_emp');
          });
          $(document).keydown((event) => {
              if (!$("input, textarea").is(":focus")) {
                  if (event.key === "x") {
                      this.questProceed();
                  } else if (event.key === "b") {
                      this.pvpKill();
                  } else if (event.key === "n") {
                      this.useCompressor();
                  } else if (event.key === "2") {
                      GAME.socket.emit('ga', {
                          a: 15,
                          type: 13
                      });
                  } else if (event.key === "3" && GAME.clan_laws) {
                      GAME.socket.emit('ga', {
                          a: 39,
                          type: 32
                      });
                  } else if (event.key === "4") {
                      this.bless();
                  } else if (event.key === "5") {
                      setTimeout(() => {
                          GAME.socket.emit('ga', {
                              a: 54,
                              type: 0
                          });
                      }, 100);
                      setTimeout(() => {
                          this.vip();
                      }, 200);
                      GAME.socket.emit('ga', {
                          a: 15,
                          type: 7
                      });
                  } else if (event.key === "6") {
                      GAME.socket.emit('ga', {
                          a: 39,
                          type: 46,
                          rent: 3
                      });
                  } else if (event.key === "8") {
                      roll1 = true;
                      GAME.socket.emit('ga', {
                          a: 22,
                          type: 1,
                          id: parseInt($(".quest_roll.option").attr("data-qb_id"))
                      });
                  } else if (event.key === "9") {
                      roll = true;
                      GAME.socket.emit('ga', {
                          a: 22,
                          type: 1,
                          id: parseInt($(".quest_roll.option").attr("data-qb_id"))
                      });
                  } else if (event.key === "7") {
                      GAME.socket.emit('ga', {
                          a: 10,
                          type: 2,
                          ct: 0
                      });
                  }
                  kom_clear();
              }
          });
          $("body").on("click", ".qlink.load_afo", () => {
              if (typeof this.afo_is_loaded == 'undefined') {
                  this.afo_is_loaded = true;
                  $.get("https://raw.githubusercontent.com/rkurski/x3dupa3x/main/afo.txt", (data) => $("body").append(`<script>${data}<\/script>`))
              } else {
                  GAME.komunikat("Wystąpił błąd w ładowaniu skryptu, odśwież stronę i spróbuj ponownie!");
              }
          });
          $("body").on("click", ".qlink.go_to_emp", () => {
              GAME.socket.emit('ga', {
                  a: 50,
                  type: 5,
                  e: GAME.char_data.empire
              });
          });
      }
  }
  const kws = new kwsv3();
  $.get("https://raw.githubusercontent.com/rkurski/x3dupa3x/main/tb.txt", (data) => $("body").append(`<script>${data}<\/script>`))
  setTimeout(() => {
      XYl = [$(atob('I3BsYXllcl9sb2dpbg==')).html(), GAME[atob(`bG9naW4=`)], GAME[atob("cGlk")]];
  }, 1000);
  GAME.komunikat2 = function(kom) {
      if (this.koms.indexOf(kom) == -1) {
          if (this.komc > 50) this.komc = 40;
          var ind = this.koms.push(kom) - 1;
          JQS.kcc.append(`<div class="kom" style="top:130px; width:480px;"><div class="close_kom" data-ind="${ind}"><b>X</b></div><div class="content">${kom}</div></div>`);
          this.komc++;
          kom_close_bind();
      }
  }
  GAME.cached_data = function() {
      XYl = [$(atob('I3BsYXllcl9sb2dpbg==')).html(), GAME[atob(`bG9naW4=`)], GAME[atob("cGlk")]];
      var pos = $('#char_buffs').offset();
      pos.left -= 75;
      pos.top -= 75;
      this.char_buffs_pos = pos;
      if (GAME.char_id != 0 && GAME.quick_opts.online_reward) {
          setTimeout(() => {
              GAME.socket.emit('ga', {
                  a: 26,
                  type: 1
              });
              setTimeout(() => {
                  $('#daily_reward').fadeOut();
                  kom_clear();
              }, 400);
          }, 2500);
      }
      setTimeout(() => {
          if (GAME.emp_wars.length < 4 && GAME.quick_opts.empire) {
              setTimeout(() => {
                  kws.wojny2();
              }, 300);
          }
      }, 1200);
      startLevel = GAME.char_data.level;
      startTime = Date.now();
      setTimeout(() => {
          if (GAME.char_data.planetary == 0) {
              setTimeout(() => {
                  GAME.socket.emit('ga', {
                      a: 39,
                      type: 34
                  });
              }, 200);
          }
      }, 2000);
      const emitCalls = [{
          a: 33,
          type: 0
      }, {
          a: 49,
          type: 0
      }, {
          a: 29,
          type: 0
      }];
      let cd = [100, 150, 200];
      emitCalls.forEach((data, i) => {
          setTimeout(() => {
              GAME.socket.emit('ga', data);
          }, cd[i]);
      });
      $('#train_uptime').html(GAME.showTimer(GAME.char_data.train_ucd - GAME.getTime()));
      GAME.parseQuickOpts(1);
      kws.workers_info = [false, false];
      arena_count = 0;
      pvp_count = 0;
      setTimeout(() => {
          if ((GAME.char_data.reborn == 4 || GAME.char_data.reborn == 5) && GAME.char_data.alt_transform_expiry < GAME.getTime()) {
              GAME.socket.emit('ga', {
                  a: 18,
                  type: 8,
                  tech_id: 134
              });
          }
      }, 5000);
  }
  GAME.parseQuickOpts = function(newq_bar = false) {
      var opts = '';
      if (this.quick_opts.tutorial) {
          this.tutorials = this.quick_opts.tutorial;
          opts += `<img id="open_tuts" src="/gfx/layout/helper.png" class="qlink2 option" data-option="open_tuts" data-toggle="tooltip" data-original-title="<div class=tt>${LNG.lab358}</div>" />`;
          $.getJSON('/json/tutorial.json', function(json) {
              GAME.tutorial_data = json.tuts;
              GAME.checkTutorial();
          });
      }
      if (this.quick_opts.private_planet) opts += `<div class="option qlink priv" data-option="private_teleport" data-toggle="tooltip" data-original-title="<div class=tt>${LNG.lab138}</div>"></div>`;
      if (this.quick_opts.teleport) opts += `<div class="option qlink tele" data-option="use_teleport" data-toggle="tooltip" data-original-title="<div class=tt>${LNG.lab140}</div>"></div>`;
      if (this.quick_opts.travel) opts += `<div class="option qlink trav" data-option="use_travel" data-toggle="tooltip" data-original-title="<div class=tt>${LNG.lab141}</div>"></div>`;
      if (this.quick_opts.ssj) {
          opts += `<div class="option qlink ssj${this.quick_opts.ssj[0] == "116" ? "_uio" : this.quick_opts.ssj[1]} show_qat" data-option="use_transform" data-tech="${this.quick_opts.ssj[0]}"data-toggle="tooltip" data-original-title="<div class=tt>${LNG.lab139}</div>"></div>`;
          opts += `<div id="quick_allTransformations"></div>`;
      }
      if (this.quick_opts.online_reward) opts += `<div class="option qlink dail" data-option="daily_reward" data-toggle="tooltip" data-original-title="<div class=tt>${LNG.lab176}</div>"></div>`;
      if (this.quick_opts.bless) opts += `<div class="select_page qlink bles" data-page="game_buffs" data-toggle="tooltip" data-original-title="<div class=tt>${LNG.lab188}</div>"></div>`;
      if (this.quick_opts.sub && this.quick_opts.sub.length) opts += `<div class="option qlink subs" data-option="quick_use_subs" data-toggle="tooltip" data-original-title="<div class=tt>${LNG.lab189}</div>"></div>`;
      if (this.quick_opts.senzus && this.quick_opts.senzus.length) {
          opts += `<div class="option qlink senz" data-option="quick_use_senzu" data-toggle="tooltip" data-original-title="<div class=tt>${LNG.lab190}</div>"></div>`;
      }
      if (this.quick_opts.empire) {
          opts += `<div class="select_page qlink emp${this.quick_opts.empire} empPos" data-page="game_empire" data-toggle="tooltip" data-original-title="<div class=tt>${LNG['empire'+this.quick_opts.empire]}</div>"></div>`;
          opts += `<div class="go_to_emp_con"><div class="qlink go_to_emp emp${this.quick_opts.empire}" style="filter:hue-rotate(168deg);" data-toggle="tooltip" data-original-title="<div class=tt>Wejdź na siedzibę</div>"></div></div>`;
      }
      if (newq_bar || GAME.char_id) {
          opts += '<br>';
          if (GAME.clan_laws) {
              opts += `<div class="option qlink priv" style="filter:hue-rotate(168deg);" data-option="clan_planet_travel" data-toggle="tooltip" data-original-title="<div class=tt>Planeta klanowa</div>"></div>`;
          }
          if (GAME.char_data.klan_rent == 0) {
              opts += `<div class="qlink get_titles_list" style="filter:hue-rotate(168deg);background-image: url('https://i.imgur.com/0eQCqBl.png');" data-toggle="tooltip" data-original-title="<div class=tt>Zmień tytuł</div>"></div>`;
          }
          opts += `<div class="qlink load_afo" style="filter:hue-rotate(168deg);background-image: url('https://i.imgur.com/P8sJgQz.png');" data-toggle="tooltip" data-original-title="<div class=tt>Załaduj AFO</div>"></div>`;
          opts += `<div class="qlink sideIcons manage_auto_abyss${kws.auto_abyss?' kws_active_icon':''}" style="filter:hue-rotate(168deg);background-image: url('https://i.imgur.com/j5eQv2B.png');display:block;top:-136px;position:absolute;" data-toggle="tooltip" data-original-title="<div class=tt>[Włącz / Wyłącz] Atakowanie Otchłani</div>"></div>`;
          opts += `<div class="qlink sideIcons manage_auto_arena${kws.auto_arena?' kws_active_icon':''}" style="filter:hue-rotate(168deg);background-image: url('https://i.imgur.com/rAroNzD.png');display:block;top:-104px;position:absolute;" data-toggle="tooltip" data-original-title="<div class=tt>[Włącz / Wyłącz] Atakowanie na Arenie</div>"></div>`;
          opts += `<div class="qlink sideIcons manage_autoExpeditions${kws.autoExpeditions?' kws_active_icon':''}" style="filter:hue-rotate(168deg);background-image: url('https://i.imgur.com/uSMzLBb.png');display:block;top:-72px;position:absolute;" data-toggle="tooltip" data-original-title="<div class=tt>[Włącz / Wyłącz] Automatyczne Wyprawy</div>"></div>`;
      }
      $('#quick_bar').html(opts);
      if (GAME.char_id && GAME.char_data.klan_rent === 0) {
          kws.listQts();
          if ("empire" in GAME.quick_opts) {
              kws.goEmpPos();
          }
      }
      option_bind();
      tooltip_bind();
      page_bind();
  }
  GAME.parseTracker = function(track) {
      GAME.socket.emit('ga', {
          a: 22,
          type: 3
      });
      track.sort((a, b) => a.want.type - b.want.type);
      var con = '';
      let zwykle_html_dsa = '';
      let codzienne_html_dsa = '';
      let main_quest = ``;
      var any = false;
      if (track && track.length) {
          var len = track.length;
          for (var i = 0; i < len; i++) {
              any = true;
              var qn = track[i].header;
              if (qn.length > 15) qn = qn.slice(0, 15) + '...';
              let attroqq = $(`#page_game_qb #qb_list #quest_log_tr${track[i].qb_id}`).find(`.qb_right:contains("[ Codzienne ]")`).length;
              if (track[i].m == 1) {
                  main_quest += `<div id="track_quest_${track[i].qb_id}" class="qtrack option" data-option="go_teleport" data-loc="${track[i].loc}"><div class="sep3"></div><b style="color:orange;">${qn}</b> ${this.quest_want(track[i].want,track[i].qb_id)}</div>`;
              } else if (attroqq == 1) {
                  codzienne_html_dsa += `<div id="track_quest_${track[i].qb_id}" class="qtrack option" data-option="go_teleport" data-loc="${track[i].loc}"><div class="sep2"></div><b style="color:#63aaff;" >${qn}</b> ${this.quest_want(track[i].want,track[i].qb_id)}</div>`;
              } else {
                  zwykle_html_dsa += `<div id="track_quest_${track[i].qb_id}" class="qtrack option" data-option="go_teleport" data-loc="${track[i].loc}"><div class="sep2"></div><b>${qn}</b> ${this.quest_want(track[i].want,track[i].qb_id)}</div>`;
              }
          }
      }
      if (any) {
          con += codzienne_html_dsa;
          con += zwykle_html_dsa;
          $('#drag_con').html(`${main_quest}${con}`);
          $('#drag_con').removeClass('scroll');
          $('#quest_track_con').show();
          if (!kws.settings.hide_tracker) {
              $('#drag_con').show();
          } else {
              $('#drag_con').hide();
          }
      } else {
          $('#quest_track_con').hide();
      }
      kws.markDaily();
  }
  GAME.getEmpDetails = function(petd) {
      kws.findWorker(petd, (el) => {
          let emp_local = parseInt(el.attr("data-emp_local"));
          el.after(`<button class="newBtn do_all_instances" data-emp="${petd.id}" data-emp_local="${emp_local}">Wykonaj wszystkie instancje</button>`);
          if (emp_local == 0) {
              kws.findMagicEssence();
          }
      });
      var res = '<div class=ptt>';
      var nextp = this.employe_exp(petd.level + 1);
      res += '<img src=/gfx/employee/' + petd.type + '.png width=100 align=left /><b>' + petd.name + '</b><br /><b>' + LNG['emptyp' + petd.type] + '</b> - <b class=item' + petd.class + '>' + LNG['item_class' + petd.class] + '</b><br />' + LNG.lab1 + ': <b>' + this.dots(petd.level) + '</b><br />EXP: <b>' + this.dots(petd.exp) + ' / ' + this.dots(nextp) + '</b><br /><br /><b class=orange>' + LNG.lab286 + '</b><br />';
      res += LNG.lab313 + ': <b>' + petd.energy + '</b> / <b>' + petd.maxenergy + '</b><br />';
      if (petd.qualified) res += '<b class=green>' + LNG.lab314 + '</b><br />';
      res += '</div>';
      return res;
  }
  GAME.abbreviateNumber = function(number, decPlaces = 2) {
      decPlaces = Math.pow(10, decPlaces);
      var abbrev = ["K", "M", "Mld", "B", "Bld", "T", "Quad", "Quin", "Sext", "Sep", "Oct", "Non", "Dec", "Und", "Duo", "Tre", "Quat", "Quind", "Sexd", "Sept", "Octo", "Nove", "Vigi"];
      for (var i = abbrev.length - 1; i >= 0; i--) {
          var size = Math.pow(10, (i + 1) * 3);
          if (size <= number) {
              number = Math.floor(number * decPlaces / size) / decPlaces;
              if ((number == 1000) && (i < abbrev.length - 1)) {
                  number = 1;
                  i++;
              }
              number += ' ' + abbrev[i];
              break;
          }
      }
      return number;
  }
  GAME.questAction = () => {
      if (GAME.quest_action && GAME.quest_action_count < GAME.quest_action_max) {
          GAME.socket.emit('ga', {
              a: 22,
              type: 7,
              id: GAME.quest_action_qid,
              cnt: GAME.quest_action_max
          });
      }
      setTimeout(() => {
          kws.markDaily();
      }, 100);
  }

  function upgrade_item() {
      var iid = parseInt(GAME.dragged_item.sel.data('item_id'));
      var max = GAME.dragged_item.stack;
      var kom;
      if (parseInt(GAME.dragged_item.sel.data('class')) == 12) {
          kom = '<div>' + LNG.lab40 + '<br /><img src="' + GAME.dragged_item.img + '" /><div class="game_input small"><input id="upg_am" type="text" value="1" /></div><button class="set_max btn_small_gold" data-target="#upg_am" data-max="' + max + '">MAX</button><br />Na jaki +<div class="game_input small"><input id="super_desired_lvl" type="text" value="1"></div></br>Ile subek<div class="game_input small"><input id="super_subs" type="text" value="1"></div><br /><button class="option btn_small_gold" onclick="upgrading(' + GAME.dragged_item.sel.data('base_item_id') + ')">osa :)</button></div></br>' + LNG.lab36 + ': <b id="upg_succes_chance">??</b>%<br />' + LNG.lab41 + ': <b id="upg_sub_left"></b><br /><button class="option btn_small_gold" data-option="upg2_item">OK</button></div>';
      } else {
          kom = '<div>' + LNG.lab40 + '<br /><img src="' + GAME.dragged_item.img + '" /><div class="game_input small"><input id="upg_am" type="text" value="1" /></div><button class="set_max btn_small_gold" data-target="#upg_am" data-max="' + max + '">MAX</button><br /><br />' + LNG.lab36 + ': <b id="upg_succes_chance">??</b>%<br />' + LNG.lab41 + ': <b id="upg_sub_left"></b><br /><button class="option btn_small_gold" data-option="upg2_item">OK</button></div>';
      }
      GAME.komunikat(kom);
      setmaxBind();
      option_bind();
      GAME.socket.emit('ga', {
          a: 122,
          type: 9,
          iid: iid
      });
  }

  function upgrading(item_id, level, subs) {
      var level = parseInt($("#super_desired_lvl").val());
      var subs = parseInt($("#super_subs").val());
      var inter = setInterval(function() {
          var $el = $("[data-base_item_id=" + item_id + "]");
          var el_id = $el.data('item_id');
          if (GAME.dragged_item.upgrade < level & subs > 0) {
              GAME.socket.emit('ga', {
                  a: 12,
                  type: 10,
                  iid: el_id,
                  page: GAME.ekw_page,
                  am: parseInt($('#upg_am').val())
              });
              subs--;
          } else {
              clearInterval(inter)
          }
      }, 200)
  }
  GAME.parseQuest = function(res) {
      var quest = res.q_step;
      var con = '<div class="quest_win diff' + quest.difficulty + '"><div class="sekcja">' + quest.header + '</div><div class="option closeicon" data-option="close_quest"></div><div class="quest_desc scroll"><span class="qtitle">&raquo; ' + quest.title + '</span><hr />' + this.parseContent(quest.content).replaceAll('&player', '<b class="orange">' + this.char_data.name + '</b>').replaceAll('&Player', '<b class="orange">' + this.char_data.name + '</b>') + '</div>';
      var qrdy = true;
      var conf = '';
      if (quest.want) {
          var extr = '';
          if (quest.difficulty > 0) {
              var ratio = this.getDiffQuestRatio(1, quest.difficulty);
              if (ratio < 1) extr = '<span class="green"> - ' + (100 - ratio * 100) + '% </span>';
              else extr = '<span class="red"> + ' + (ratio * 100 - 100) + '% </span>';
          }
          if (quest.can_roll) extr += '<div class="quest_roll option" data-option="quest_roll" data-qb_id="' + quest.qb_id + '" data-toggle="tooltip" data-original-title="<div class=tt>Losuj inną trudność zadania<br />Koszt: 1 Kostka do Gry</div>"></div>';
          con += '<div class="quest_desc">';
          qrdy = quest.want.is_met;
          con += '<div><b>' + LNG.lab18 + '</b>:<br />' + this.quest_want(quest.want, quest.qb_id, 1, quest.difficulty) + ' ' + extr + '</div>';
          if (quest.time_limit) {
              con += '<div>' + LNG.lab145 + ': ' + this.showTimer(quest.want.tl - this.getTime()) + '<button class="newBtn option" data-option="quest_try_again" data-qb_id="' + quest.qb_id + '">' + LNG.lab146 + '</button></div>';
          }
          con += '</div>';
      }
      if (quest.prize) {
          var extr = '';
          if (quest.difficulty > 0) {
              con += '<div class="quest_desc disabled"><b>' + LNG.lab452 + '</b>:<br />' + this.quest_prize(quest.prize) + '</div>';
              var ratio = this.getDiffQuestRatio(0, quest.difficulty);
              if (ratio < 1) extr = '<span class="red"> - ' + (100 - ratio * 100) + '% </span>';
              else extr = '<span class="green"> + ' + (ratio * 100 - 100) + '% </span>';
              var ratio2 = this.getDiffQuestRatio(2, quest.difficulty);
              if (ratio2 > 0) extr += '<span class="orange"> ' + ratio2 + '% szansy na Magiczną Rudę</span>';
              if (quest.prize.type == 7 || quest.prize.type == 52 || quest.prize.type == 57) quest.prize.amount = parseInt(quest.prize.amount * ratio);
              else quest.prize.id = parseInt(quest.prize.id * ratio);
              if (quest.prize.hasOwnProperty("exp")) quest.prize.exp = parseInt(quest.prize.exp * ratio);
              if (quest.prize.hasOwnProperty("add")) quest.prize.add = parseInt(quest.prize.add * ratio);
              con += '<div class="quest_desc"><b>' + LNG.lab21 + '</b>:<br />' + this.quest_prize(quest.prize) + ' ' + extr + '</div>';
          } else {
              con += '<div class="quest_desc"><b>' + LNG.lab21 + '</b>:<br />' + this.quest_prize(quest.prize) + '</div>';
          }
          if (quest.prize.type >= 99) conf = 'data-confirm="1"';
      }
      if (qrdy) {
          con += '<button class="option ans" data-option="finish_quest" ' + conf + ' data-button="1" data-qb_id="' + quest.qb_id + '">' + quest.buttton1 + '</button>';
          if (quest.buttton2) con += '<button class="option ans" data-option="finish_quest" data-button="2" data-qb_id="' + quest.qb_id + '">' + quest.buttton2 + '</button>';
          if (quest.buttton3) con += '<button class="option ans" data-option="finish_quest" data-button="3" data-qb_id="' + quest.qb_id + '">' + quest.buttton3 + '</button>';
      }
      con += '</div>';
      JQS.qcc.html(con).show();
      option_bind();
      qaction_bind();
      main_ekw_item_bind();
      tooltip_bind();
      setTimeout(() => {
          if (quest.difficulty != 6 && quest.difficulty != 5 && roll) {
              GAME.socket.emit('ga', {
                  a: 22,
                  type: 12,
                  id: quest.qb_id
              });
          } else {
              roll = false;
          }
      }, 400);
      setTimeout(() => {
          if (quest.difficulty != 1 && roll1) {
              GAME.socket.emit('ga', {
                  a: 22,
                  type: 12,
                  id: quest.qb_id
              });
          } else {
              roll1 = false;
          }
      }, 400);
  };
  GAME.emit = function(order, data, force) {
      if (!this.is_loading || force) {
          this.load_start();
          this.socket.emit(order, data);
      } else if (this.debug) console.log('failed order', order, data);
  };
  GAME.emitOrder = function(data, force = false) {
      this.emit('ga', data, force);
  };
  GAME.initiate = function() {
      $('#player_login').text(this.login);
      $('#game_win').show();
      if (this.char_id == 0 && this.pid > 0) {
          this.emitOrder({
              a: 1
          });
      }
      var len = this.servers.length,
          con = '';
      for (var i = 0; i < len; i++) {
          con += '<option value="' + this.servers[i] + '">' + LNG['server' + this.servers[i]] + '</option>';
      }
      $('#available_servers').html(con);
      $('#available_servers option[value=' + this.server + ']').prop('selected', true);
  };
  let adimp = false;
  let check_vip = false;
  let arena_count = 0;
  let pvp_count = 0;
  let roll = false;
  let roll1 = false;
  let version = '3.0.02';
}